# The value of kitty_mod is used as the modifier for all default shortcuts,
# you can change it in your kitty.conf to change the modifiers for all the
# default shortcuts.
kitty_mod Super

# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

# Clipboard
map ctrl+shift+v        paste_from_clipboard
map ctrl+shift+s        paste_from_selection
map ctrl+shift+c        copy_to_clipboard
map shift+insert        paste_from_selection

# Scrolling
map ctrl+shift+up       scroll_line_up
map ctrl+shift+down     scroll_line_down
map ctrl+shift+home     scroll_home
map ctrl+shift+end      scroll_end
map ctrl+shift+h        show_scrollback
map shift+page_up       scroll_page_up
map shift+page_down     scroll_page_down

# Window management
map kitty_mod+enter     new_window
map kitty_mod+w         close_window
map kitty_mod+down     next_window
map kitty_mod+up        previous_window
map kitty_mod+f         move_window_forward
map kitty_mod+b         move_window_backward
map kitty_mod+`         move_window_to_top
map kitty_mod+1         first_window
map kitty_mod+2         second_window
map kitty_mod+3         third_window
map kitty_mod+4         fourth_window
map kitty_mod+5         fifth_window
map kitty_mod+6         sixth_window
map kitty_mod+7         seventh_window
map kitty_mod+9         eighth_window
map kitty_mod+9         ninth_window
map kitty_mod+0         tenth_window

# Tab management
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout
map kitty_mod+.        move_tab_forward
map kitty_mod+,        move_tab_backward

# Miscellaneous
map ctrl+shift+plus change_font_size all +2.0
map ctrl+shift+minus change_font_size all -2.0
map ctrl+shift+backspace change_font_size all 0

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
#
